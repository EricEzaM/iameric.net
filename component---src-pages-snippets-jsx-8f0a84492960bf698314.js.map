{"version":3,"sources":["webpack:///./src/components/button-group.jsx","webpack:///./src/pages/snippets.jsx","webpack:///./src/utils/category-url-conversion.jsx","webpack:///./src/components/cards/snippet-card.jsx"],"names":["ButtonGroup","items","id","text","selectedItems","onButtonClicked","className","map","includes","join","key","onClick","e","SnippetsPage","useStaticQuery","query","snippets","cats","categories","group","useState","edges","displayedSnippets","setDisplayedSnippets","useQueryParam","withDefault","StringParam","category","setCategory","useEffect","filteredSnippets","filter","snippet","getUrlFriendlyName","frontmatter","undefined","title","c","fieldValue","clickedCategory","specialNames","module","exports","name","Object","keys","SnippetCard","s","to","slug","fluid","headerImage","childImageSharp","aspectRatio","alt","date"],"mappings":"6FAAA,yBAyCeA,IA1BK,SAAC,GAOd,IAAD,IANJC,aAMI,MANI,CACNC,GAAI,GACJC,KAAM,IAIJ,MAFJC,qBAEI,MAFY,CAAC,IAEb,MADJC,uBACI,MADc,SAAAH,KACd,EACJ,OACE,yBAAKI,UAAU,gBACZL,EAAMM,KAAI,gBAAGL,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACT,4BACEG,UAAW,CACT,qBACAF,EAAcI,SAASN,GAAM,SAAW,IACxCO,KAAK,KACPC,IAAKP,EACLQ,QAAS,SAAAC,GAAC,OAAIP,EAAgBH,KAE7BC,S,kCClCX,oHAuEeU,UA7DM,WACnB,MAAiCC,YAAeC,GAAxCC,EAAR,EAAQA,SAEJC,EAFJ,EAAkBC,WAEIC,MAEtB,EAAkDC,mBAASJ,EAASK,OAA7DC,EAAP,KAA0BC,EAA1B,KAEA,EAAgCC,YAC9B,WACAC,YAAYC,IAAa,KAFpBC,EAAP,KAAiBC,EAAjB,KAsBA,OAjBAC,qBAAU,WACR,IAAIC,EAAmBd,EAASK,MAAMU,QAAO,YAAkB,IAAfC,EAAc,EAAdA,QAE9C,OADcC,6BAAmBD,EAAQE,YAAYP,YAClCA,QAAyBQ,IAAbR,GAAuC,KAAbA,KAG3DJ,EAAqBO,KACpB,CAACH,EAAUX,IAWZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKoB,MAAM,aAEX,yBAAK9B,UAAU,iBAAf,oLAMA,6BAEE,2BAAOA,UAAU,2BACf,kBAAC,IAAD,CACEL,MAAOgB,EAAKV,KAAI,SAAA8B,GAAC,MAAK,CACpBnC,GAAI+B,6BAAmBI,EAAEC,YACzBnC,KAAMkC,EAAEC,eAEVlC,cAAe,CAACuB,GAChBtB,gBAAiB,SAAAH,GA3B3B,IAA2BqC,EAEvBX,GAFuBW,EA2BwBrC,KA1BzByB,OACVQ,EAEAI,OA0BV,6BAASjC,UAAU,4BAChBgB,EAAkBf,KAAI,gBAAGyB,EAAH,EAAGA,QAAH,OACrB,kBAAC,IAAD,CAAaA,QAASA,EAAStB,IAAKsB,EAAQ9B,YAUxD,IAAMa,EAAK,c,mBCzEX,IAAMyB,EAAe,CACnB,KAAM,SACN,MAAO,OAcTC,EAAOC,QAAU,CAAET,mBAPnB,SAA4BU,GAC1B,OAAIC,OAAOC,KAAKL,GAAchC,SAASmC,GAC9BH,EAAaG,GAEfA,K,kCCbT,0DA8BeG,IA1BK,SAAC,GAAoB,IAATC,EAAQ,EAAjBf,QACrB,OACE,yBAAK1B,UAAU,qBACb,kBAAC,IAAD,CACE0C,GAAI,aAAeD,EAAEb,YAAYe,KACjC3C,UAAU,yCAEV,kBAAC,IAAD,CACEA,UAAW,wBACX4C,MAAK,iBACAH,EAAEb,YAAYiB,YAAYC,gBAAgBF,MAD1C,CAEHG,YAAa,IAEfC,IAAG,aAAeP,EAAEb,YAAYE,QAElC,6BACE,wBAAI9B,UAAW,qCACZyC,EAAEb,YAAYE,OAEjB,0BAAM9B,UAAW,cAAeyC,EAAEb,YAAYqB","file":"component---src-pages-snippets-jsx-8f0a84492960bf698314.js","sourcesContent":["import React from \"react\"\n\n/**\n * @callback buttonClickedCallback\n * @param {string} Id The unique Id of the items which was clicked\n */\n\n/**\n * @param {object} props Component Properties\n * @param {object} props.items Items of which a button will be created for each\n * @param {string} props.items.id A unique identifier for each button item\n * @param {string} props.items.text The text to be displayed on then button\n * @param {Array} props.selectedItems The buttons which will be shown as active\n * @param {buttonClickedCallback} props.onSelectionChanged Callback function after change to the selection occurs\n */\nconst ButtonGroup = ({\n  items = {\n    id: \"\",\n    text: \"\",\n  },\n  selectedItems = [\"\"],\n  onButtonClicked = id => {},\n}) => {\n  return (\n    <div className=\"button-group\">\n      {items.map(({ id, text }) => (\n        <button\n          className={[\n            \"button-group__item\",\n            selectedItems.includes(id) ? \"active\" : \"\",\n          ].join(\" \")}\n          key={text}\n          onClick={e => onButtonClicked(id)}\n        >\n          {text}\n        </button>\n      ))}\n    </div>\n  )\n}\n\nexport default ButtonGroup\n","import React, { useState, useEffect } from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { useQueryParam, StringParam, withDefault } from \"use-query-params\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport ButtonGroup from \"../components/button-group\"\nimport { getUrlFriendlyName } from \"../utils/category-url-conversion\"\nimport SnippetCard from \"../components/cards/snippet-card\"\n\nconst SnippetsPage = () => {\n  const { snippets, categories } = useStaticQuery(query)\n\n  let cats = categories.group\n\n  const [displayedSnippets, setDisplayedSnippets] = useState(snippets.edges)\n\n  const [category, setCategory] = useQueryParam(\n    \"category\",\n    withDefault(StringParam, \"\")\n  )\n\n  useEffect(() => {\n    let filteredSnippets = snippets.edges.filter(({ snippet }) => {\n      let snipCat = getUrlFriendlyName(snippet.frontmatter.category)\n      return snipCat === category || category === undefined || category === \"\"\n    })\n\n    setDisplayedSnippets(filteredSnippets)\n  }, [category, snippets])\n\n  function onCategoryClicked(clickedCategory) {\n    if (clickedCategory === category) {\n      setCategory(undefined)\n    } else {\n      setCategory(clickedCategory)\n    }\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Snippets\" />\n\n      <div className=\"page__subtext\">\n        Pieces of code which don't fit the longer format of articles. Kind of\n        like Github Gists, but they can include some paragraph content for\n        additional context, and be categorised.\n      </div>\n\n      <div>\n        {/* Aside is inside div so that it's height is independent of section height */}\n        <aside className=\"page__filters-container\">\n          <ButtonGroup\n            items={cats.map(c => ({\n              id: getUrlFriendlyName(c.fieldValue),\n              text: c.fieldValue,\n            }))}\n            selectedItems={[category]}\n            onButtonClicked={id => onCategoryClicked(id)}\n          ></ButtonGroup>\n        </aside>\n        <section className=\"card-container--vertical\">\n          {displayedSnippets.map(({ snippet }) => (\n            <SnippetCard snippet={snippet} key={snippet.id} />\n          ))}\n        </section>\n      </div>\n    </Layout>\n  )\n}\n\nexport default SnippetsPage\n\nconst query = graphql`\n  query {\n    snippets: allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: {\n        frontmatter: { template: { eq: \"snippet\" }, published: { ne: false } }\n      }\n    ) {\n      edges {\n        snippet: node {\n          id\n          ...SnippetCardInfo\n        }\n      }\n    }\n    categories: allMarkdownRemark {\n      group(field: frontmatter___category) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n","const specialNames = {\n  \"C#\": \"CSharp\",\n  \"C++\": \"Cpp\",\n}\n\n/**\n * Gets a custom url-friendly category/tag name. E.g. C++ would encode to C%2B%2B. Using this, we encode as Cpp instead.\n * @param {string} name The name to encode.\n */\nfunction getUrlFriendlyName(name) {\n  if (Object.keys(specialNames).includes(name)) {\n    return specialNames[name]\n  }\n  return name\n}\n\nmodule.exports = { getUrlFriendlyName }\n","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nconst SnippetCard = ({ snippet: s }) => {\n  return (\n    <div className=\"card card--narrow\">\n      <Link\n        to={\"/snippets/\" + s.frontmatter.slug}\n        className=\"card__content card__content--vertical\"\n      >\n        <Img\n          className={\"card__image--vertical\"}\n          fluid={{\n            ...s.frontmatter.headerImage.childImageSharp.fluid,\n            aspectRatio: 2,\n          }}\n          alt={`Image for ${s.frontmatter.title}`}\n        />\n        <div>\n          <h3 className={\"card__title card__title--vertical\"}>\n            {s.frontmatter.title}\n          </h3>\n          <time className={\"card__date\"}>{s.frontmatter.date}</time>\n        </div>\n      </Link>\n    </div>\n  )\n}\n\nexport default SnippetCard\n\nexport const SnippetCardInfoFragment = graphql`\n  fragment SnippetCardInfo on MarkdownRemark {\n    frontmatter {\n      title\n      slug\n      category\n      headerImage {\n        childImageSharp {\n          fluid(quality: 100) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      date(formatString: \"MMMM Do, YYYY\")\n    }\n  }\n`\n"],"sourceRoot":""}