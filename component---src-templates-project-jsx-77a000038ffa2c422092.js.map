{"version":3,"sources":["webpack:///./src/images/svg/external-link.svg","webpack:///./src/components/link-list.jsx","webpack:///./src/utils/category-url-conversion.jsx","webpack:///./src/templates/project.jsx"],"names":["React","ExternalLink","props","createElement","defaultProps","module","exports","default","LinkList","titles","links","length","className","map","e","i","arr","Fragment","key","to","specialNames","getUrlFriendlyName","name","Object","keys","includes","Project","post","data","title","frontmatter","url","href","style","fill","github","tags","date","fluid","headerImage","childImageSharp","imgStyle","objectPosition","dangerouslySetInnerHTML","__html","html"],"mappings":"+EAAA,IAAIA,EAAQ,EAAQ,QAEpB,SAASC,EAAcC,GACnB,OAAOF,EAAMG,cAAc,MAAMD,EAAM,CAACF,EAAMG,cAAc,OAAO,CAAC,KAAO,OAAO,EAAI,gBAAgB,IAAM,IAAIH,EAAMG,cAAc,OAAO,CAAC,EAAI,oIAAoI,IAAM,MAG9RF,EAAaG,aAAe,CAAC,QAAU,YAAY,MAAQ,KAAK,OAAS,MAEzEC,EAAOC,QAAUL,EAEjBA,EAAaM,QAAUN,G,kCCVvB,qCAuBeO,IApBE,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC1B,OACE,oCACGD,GAAUA,EAAOE,SAAWD,EAAMC,QACjC,0BAAMC,UAAU,aACbH,EAAOI,KAAI,SAACC,EAAGC,EAAGC,GAAP,OAEV,kBAAC,IAAMC,SAAP,CAAgBC,IAAKH,GACnB,kBAAC,IAAD,CAAMH,UAAU,iBAAiBO,GAAI,IAAMT,EAAMK,IAC9CD,GAEFC,IAAMC,EAAIL,OAAS,GAAK,6C,mBCdvC,IAAMS,EAAe,CACnB,KAAM,SACN,MAAO,OAcTf,EAAOC,QAAU,CAAEe,mBAPnB,SAA4BC,GAC1B,OAAIC,OAAOC,KAAKJ,GAAcK,SAASH,GAC9BF,EAAaE,GAEfA,K,kCCbT,0HAyDeI,UA/CC,SAAC,GAAc,IACvBC,EADsB,EAAXC,KACCD,KAClB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKE,MAAOF,EAAKG,YAAYD,QAC7B,yBAAKjB,UAAU,QACb,yBAAKA,UAAU,gBACb,4BAAKe,EAAKG,YAAYD,OACtB,yBAAKjB,UAAU,kBACY,MAAxBe,EAAKG,YAAYC,KAChB,uBAAGC,KAAML,EAAKG,YAAYC,KAA1B,UAEE,kBAAC,IAAD,CAAkBE,MAAO,CAAEC,KAAM,cAGT,MAA3BP,EAAKG,YAAYK,QAChB,uBAAGH,KAAML,EAAKG,YAAYK,QAA1B,SAEE,kBAAC,IAAD,CAAkBF,MAAO,CAAEC,KAAM,eAIvC,yBAAKtB,UAAU,cACb,kBAAC,IAAD,CACEH,OAAQkB,EAAKG,YAAYM,KACzB1B,MAAOiB,EAAKG,YAAYM,KAAKvB,KAC3B,SAAAC,GAAC,MAAI,iBAAmBO,6BAAmBP,QAG/C,8BAAOa,EAAKG,YAAYO,OAE1B,kBAAC,IAAD,CACEC,MAAOX,EAAKG,YAAYS,YAAYC,gBAAgBF,MACpDG,SAAU,CACRC,eAAgB,iBAItB,yBACE9B,UAAU,aACV+B,wBAAyB,CAAEC,OAAQjB,EAAKkB","file":"component---src-templates-project-jsx-77a000038ffa2c422092.js","sourcesContent":["var React = require('react');\n\nfunction ExternalLink (props) {\n    return React.createElement(\"svg\",props,[React.createElement(\"path\",{\"fill\":\"none\",\"d\":\"M0 0h24v24H0z\",\"key\":0}),React.createElement(\"path\",{\"d\":\"M10 6v2H5v11h11v-5h2v6a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h6zm11-3v8h-2V6.413l-7.793 7.794-1.414-1.414L17.585 5H13V3h8z\",\"key\":1})]);\n}\n\nExternalLink.defaultProps = {\"viewBox\":\"0 0 24 24\",\"width\":\"16\",\"height\":\"16\"};\n\nmodule.exports = ExternalLink;\n\nExternalLink.default = ExternalLink;\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst LinkList = ({ titles, links }) => {\n  return (\n    <>\n      {titles && titles.length === links.length && (\n        <span className=\"link-list\">\n          {titles.map((e, i, arr) => (\n            // React fragment = <>, </>\n            <React.Fragment key={i}>\n              <Link className=\"link-list-link\" to={\"/\" + links[i]}>\n                {e}\n              </Link>\n              {i !== arr.length - 1 && <span> / </span>}\n            </React.Fragment>\n          ))}\n        </span>\n      )}\n    </>\n  )\n}\n\nexport default LinkList\n","const specialNames = {\n  \"C#\": \"CSharp\",\n  \"C++\": \"Cpp\",\n}\n\n/**\n * Gets a custom url-friendly category/tag name. E.g. C++ would encode to C%2B%2B. Using this, we encode as Cpp instead.\n * @param {string} name The name to encode.\n */\nfunction getUrlFriendlyName(name) {\n  if (Object.keys(specialNames).includes(name)) {\n    return specialNames[name]\n  }\n  return name\n}\n\nmodule.exports = { getUrlFriendlyName }\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/layout\"\nimport LinkList from \"../components/link-list\"\nimport ExternalLinkIcon from \"../images/svg/external-link.svg\"\nimport { getUrlFriendlyName } from \"../utils/category-url-conversion\"\n\nconst Project = ({ data }) => {\n  const post = data.post\n  return (\n    <Layout>\n      <SEO title={post.frontmatter.title} />\n      <div className=\"post\">\n        <div className=\"post__header\">\n          <h1>{post.frontmatter.title}</h1>\n          <div className=\"project__links\">\n            {post.frontmatter.url != null && (\n              <a href={post.frontmatter.url}>\n                Website\n                <ExternalLinkIcon style={{ fill: \"#ffffff\" }} />\n              </a>\n            )}\n            {post.frontmatter.github != null && (\n              <a href={post.frontmatter.github}>\n                GitHub\n                <ExternalLinkIcon style={{ fill: \"#ffffff\" }} />\n              </a>\n            )}\n          </div>\n          <div className=\"post__meta\">\n            <LinkList\n              titles={post.frontmatter.tags}\n              links={post.frontmatter.tags.map(\n                e => \"projects?tags=\" + getUrlFriendlyName(e)\n              )}\n            />\n            <time>{post.frontmatter.date}</time>\n          </div>\n          <Img\n            fluid={post.frontmatter.headerImage.childImageSharp.fluid}\n            imgStyle={{\n              objectPosition: \"top center\",\n            }}\n          />\n        </div>\n        <div\n          className=\"post__body\"\n          dangerouslySetInnerHTML={{ __html: post.html }}\n        ></div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Project\n\nexport const query = graphql`\n  query($slug: String!) {\n    post: markdownRemark(\n      frontmatter: { slug: { eq: $slug }, template: { eq: \"project\" } }\n    ) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM YYYY\")\n        tags\n        url\n        github\n        headerImage {\n          childImageSharp {\n            fluid(quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n      timeToRead\n    }\n  }\n`\n"],"sourceRoot":""}