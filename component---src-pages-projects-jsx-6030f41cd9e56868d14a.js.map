{"version":3,"sources":["webpack:///./src/components/cards/project-card.jsx","webpack:///./src/components/button-group.jsx","webpack:///./src/components/link-list.jsx","webpack:///./src/utils/category-url-conversion.jsx","webpack:///./src/pages/projects.jsx"],"names":["ProjectCard","p","project","className","to","frontmatter","slug","fluid","headerImage","childImageSharp","aspectRatio","alt","title","imgStyle","objectPosition","blurb","date","titles","tags","links","map","t","getUrlFriendlyName","ButtonGroup","items","id","text","selectedItems","onButtonClicked","includes","join","key","onClick","e","LinkList","length","i","arr","Fragment","specialNames","module","exports","name","Object","keys","ProjectsPage","useStaticQuery","query","projects","useState","edges","displayedProjects","setDisplayedProjects","useQueryParam","withDefault","ArrayParam","selectedTags","setSelectedTags","useEffect","filteredProjects","filter","tag","some","undefined","group","fieldValue","newTags","onTagClicked"],"mappings":"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","file":"component---src-pages-projects-jsx-6030f41cd9e56868d14a.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport LinkList from \"../link-list\"\nimport { getUrlFriendlyName } from \"../../utils/category-url-conversion\"\n\nconst ProjectCard = ({ project: p }) => {\n  return (\n    <div className=\"card\">\n      <Link to={\"/projects/\" + p.frontmatter.slug}>\n        <Img\n          className={\"card__image\"}\n          fluid={{\n            ...p.frontmatter.headerImage.childImageSharp.fluid,\n            aspectRatio: 2,\n          }}\n          alt={`Image for ${p.frontmatter.title}`}\n          imgStyle={{\n            objectPosition: \"top center\",\n          }}\n        />\n        <h3 className={\"card__title\"}>{p.frontmatter.title}</h3>\n        <div className={\"card__body\"}>{p.frontmatter.blurb}</div>\n      </Link>\n      <time className={\"card__date\"}>{p.frontmatter.date}</time>\n      <LinkList\n        titles={p.frontmatter.tags}\n        links={p.frontmatter.tags.map(\n          t => \"projects?tags=\" + getUrlFriendlyName(t)\n        )}\n      />\n    </div>\n  )\n}\n\nexport default ProjectCard\n\nexport const ProjectCardInfoFragment = graphql`\n  fragment ProjectCardInfo on MarkdownRemark {\n    frontmatter {\n      title\n      slug\n      tags\n      blurb\n      date(formatString: \"MMMM YYYY\")\n      headerImage {\n        childImageSharp {\n          fluid(quality: 100) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\n\n/**\n * @callback buttonClickedCallback\n * @param {string} Id The unique Id of the items which was clicked\n */\n\n/**\n * @param {object} props Component Properties\n * @param {object} props.items Items of which a button will be created for each\n * @param {string} props.items.id A unique identifier for each button item\n * @param {string} props.items.text The text to be displayed on then button\n * @param {Array} props.selectedItems The buttons which will be shown as active\n * @param {buttonClickedCallback} props.onSelectionChanged Callback function after change to the selection occurs\n */\nconst ButtonGroup = ({\n  items = {\n    id: \"\",\n    text: \"\",\n  },\n  selectedItems = [\"\"],\n  onButtonClicked = id => {},\n}) => {\n  return (\n    <div className=\"button-group\">\n      {items.map(({ id, text }) => (\n        <button\n          className={[\n            \"button-group__item\",\n            selectedItems.includes(id) ? \"active\" : \"\",\n          ].join(\" \")}\n          key={text}\n          onClick={e => onButtonClicked(id)}\n        >\n          {text}\n        </button>\n      ))}\n    </div>\n  )\n}\n\nexport default ButtonGroup\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst LinkList = ({ titles, links }) => {\n  return (\n    <>\n      {titles && titles.length === links.length && (\n        <span className=\"link-list\">\n          {titles.map((e, i, arr) => (\n            // React fragment = <>, </>\n            <React.Fragment key={i}>\n              <Link className=\"link-list-link\" to={\"/\" + links[i]}>\n                {e}\n              </Link>\n              {i !== arr.length - 1 && <span> / </span>}\n            </React.Fragment>\n          ))}\n        </span>\n      )}\n    </>\n  )\n}\n\nexport default LinkList\n","const specialNames = {\n  \"C#\": \"CSharp\",\n  \"C++\": \"Cpp\",\n}\n\n/**\n * Gets a custom url-friendly category/tag name. E.g. C++ would encode to C%2B%2B. Using this, we encode as Cpp instead.\n * @param {string} name The name to encode.\n */\nfunction getUrlFriendlyName(name) {\n  if (Object.keys(specialNames).includes(name)) {\n    return specialNames[name]\n  }\n  return name\n}\n\nmodule.exports = { getUrlFriendlyName }\n","import React, { useState, useEffect } from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport { useQueryParam, withDefault, ArrayParam } from \"use-query-params\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { getUrlFriendlyName } from \"../utils/category-url-conversion\"\nimport ButtonGroup from \"../components/button-group\"\nimport ProjectCard from \"../components/cards/project-card\"\n\nconst ProjectsPage = () => {\n  const { projects, tags } = useStaticQuery(query)\n\n  const [displayedProjects, setDisplayedProjects] = useState(projects.edges)\n  const [selectedTags, setSelectedTags] = useQueryParam(\n    \"tags\",\n    withDefault(ArrayParam, [])\n  )\n\n  useEffect(() => {\n    let filteredProjects = projects.edges.filter(({ project }) => {\n      let projectTags = project.frontmatter.tags.map(tag =>\n        getUrlFriendlyName(tag)\n      )\n      return (\n        projectTags.some(t => selectedTags.includes(t)) ||\n        selectedTags === undefined ||\n        selectedTags.length === 0\n      )\n    })\n\n    setDisplayedProjects(filteredProjects)\n  }, [selectedTags, projects])\n\n  function onTagClicked(tag) {\n    if (selectedTags.includes(tag)) {\n      let newTags = selectedTags.filter(t => t !== tag)\n      if (newTags.length > 0) {\n        setSelectedTags(newTags)\n      } else {\n        setSelectedTags(undefined)\n      }\n    } else {\n      setSelectedTags([...selectedTags, tag])\n    }\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Projects\" />\n      <aside className=\"page__filters-container\">\n        <ButtonGroup\n          items={tags.group.map(t => ({\n            id: getUrlFriendlyName(t.fieldValue),\n            text: t.fieldValue,\n          }))}\n          selectedItems={selectedTags}\n          onButtonClicked={id => onTagClicked(id)}\n        />\n      </aside>\n      <section className=\"card-container\">\n        {displayedProjects.map(({ project }) => (\n          <ProjectCard project={project} key={project.id} />\n        ))}\n      </section>\n    </Layout>\n  )\n}\n\nexport default ProjectsPage\n\nconst query = graphql`\n  query {\n    projects: allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: {\n        frontmatter: { template: { eq: \"project\" }, published: { ne: false } }\n      }\n    ) {\n      edges {\n        project: node {\n          id\n          ...ProjectCardInfo\n        }\n      }\n    }\n    tags: allMarkdownRemark(\n      filter: {\n        frontmatter: { template: { eq: \"project\" }, published: { ne: false } }\n      }\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}