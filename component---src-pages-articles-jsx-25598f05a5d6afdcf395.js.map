{"version":3,"sources":["webpack:///./src/components/button-group.jsx","webpack:///./src/pages/articles.jsx","webpack:///./src/components/link-list.jsx","webpack:///./src/utils/category-url-conversion.jsx","webpack:///./src/components/cards/article-card.jsx"],"names":["ButtonGroup","items","id","text","selectedItems","onButtonClicked","className","map","includes","join","key","onClick","e","ArticlesPage","useStaticQuery","query","articles","tags","group","tag","getUrlFriendlyName","fieldValue","totalCount","sort","a","b","atag","toLowerCase","btag","useState","showTags","setShowTags","edges","displayedArticles","setDisplayedArticles","useQueryParam","withDefault","StringParam","filterTerm","setFilterTerm","ArrayParam","selectedTags","setSelectedTags","useEffect","filteredArticles","filter","article","frontmatter","title","some","t","undefined","length","type","placeholder","value","onChange","target","tagId","newTags","LinkList","titles","links","i","arr","Fragment","to","specialNames","module","exports","name","Object","keys","ArticleCard","slug","fluid","headerImage","childImageSharp","aspectRatio","alt","imgStyle","objectPosition","excerpt","date"],"mappings":"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","file":"component---src-pages-articles-jsx-25598f05a5d6afdcf395.js","sourcesContent":["import React from \"react\"\n\n/**\n * @callback buttonClickedCallback\n * @param {string} Id The unique Id of the items which was clicked\n */\n\n/**\n * @param {object} props Component Properties\n * @param {object} props.items Items of which a button will be created for each\n * @param {string} props.items.id A unique identifier for each button item\n * @param {string} props.items.text The text to be displayed on then button\n * @param {Array} props.selectedItems The buttons which will be shown as active\n * @param {buttonClickedCallback} props.onSelectionChanged Callback function after change to the selection occurs\n */\nconst ButtonGroup = ({\n  items = {\n    id: \"\",\n    text: \"\",\n  },\n  selectedItems = [\"\"],\n  onButtonClicked = id => {},\n}) => {\n  return (\n    <div className=\"button-group\">\n      {items.map(({ id, text }) => (\n        <button\n          className={[\n            \"button-group__item\",\n            selectedItems.includes(id) ? \"active\" : \"\",\n          ].join(\" \")}\n          key={text}\n          onClick={e => onButtonClicked(id)}\n        >\n          {text}\n        </button>\n      ))}\n    </div>\n  )\n}\n\nexport default ButtonGroup\n","import React, { useState, useEffect } from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport {\n  useQueryParam,\n  ArrayParam,\n  StringParam,\n  withDefault,\n} from \"use-query-params\"\n\nimport ArtcileCard from \"../components/cards/article-card\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { getUrlFriendlyName } from \"../utils/category-url-conversion\"\nimport ButtonGroup from \"../components/button-group\"\n\nconst ArticlesPage = () => {\n  const { articles, tags: queryTags } = useStaticQuery(query)\n\n  const tags = queryTags.group\n    // Map to the representation that the button group expects.\n    .map(tag => ({\n      id: getUrlFriendlyName(tag.fieldValue),\n      text: `${tag.fieldValue} (${tag.totalCount})`,\n    }))\n    // Sort alphabetically\n    .sort((a, b) => {\n      let atag = a.text.toLowerCase()\n      let btag = b.text.toLowerCase()\n      if (atag < btag) return -1\n      if (atag > btag) return 1\n      return 0\n    })\n\n  const [showTags, setShowTags] = useState(false)\n  const [displayedArticles, setDisplayedArticles] = useState(articles.edges)\n  // Use URL query string to store state of filter term and tags\n  const [filterTerm, setFilterTerm] = useQueryParam(\n    \"q\",\n    withDefault(StringParam, \"\")\n  )\n  const [selectedTags, setSelectedTags] = useQueryParam(\n    \"tags\",\n    withDefault(ArrayParam, [])\n  )\n\n  useEffect(() => {\n    // Filter Term\n    let filteredArticles = articles.edges.filter(({ article }) => {\n      return article.frontmatter.title\n        .toLowerCase()\n        .includes(filterTerm.toLowerCase())\n    })\n\n    // Filter Tags\n    filteredArticles = filteredArticles.filter(({ article }) => {\n      let articleTags = article.frontmatter.tags.map(tag =>\n        getUrlFriendlyName(tag)\n      )\n      return (\n        articleTags.some(t => selectedTags.includes(t)) ||\n        selectedTags === undefined ||\n        selectedTags.length === 0\n      )\n    })\n\n    setDisplayedArticles(filteredArticles)\n\n    if (selectedTags.length > 0) {\n      setShowTags(true)\n    }\n  }, [filterTerm, selectedTags, articles])\n\n  function onTagClicked(tagId) {\n    if (selectedTags.includes(tagId)) {\n      let newTags = selectedTags.filter(t => t !== tagId)\n      if (newTags.length > 0) {\n        setSelectedTags(newTags)\n      } else {\n        setSelectedTags(undefined)\n      }\n    } else {\n      setSelectedTags([...selectedTags, tagId])\n    }\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Articles\" />\n      <section className=\"page__filters-container\">\n        <div className=\"articles__searchbar\">\n          <input\n            className=\"articles__searchbox\"\n            type=\"text\"\n            placeholder=\"Search\"\n            value={filterTerm}\n            onChange={e =>\n              // Set it to undefined if blank so that the query in the url disappears\n              setFilterTerm(e.target.value === \"\" ? undefined : e.target.value)\n            }\n          />\n          <button\n            className={[\"articles__tags-button\", showTags ? \"active\" : \"\"].join(\n              \" \"\n            )}\n            onClick={e => setShowTags(!showTags)}\n          >\n            {showTags ? \"Hide Tags\" : \"Show Tags\"}\n          </button>\n        </div>\n        <div\n          className={[\n            \"articles__tags-container\",\n            showTags ? \"active\" : \"\",\n          ].join(\" \")}\n        >\n          <ButtonGroup\n            items={tags}\n            selectedItems={selectedTags}\n            onButtonClicked={onTagClicked}\n          />\n        </div>\n      </section>\n      <section className=\"card-container\">\n        {displayedArticles.map(({ article }) => (\n          <ArtcileCard article={article} key={article.id} />\n        ))}\n      </section>\n    </Layout>\n  )\n}\n\nexport default ArticlesPage\n\nconst query = graphql`\n  query {\n    articles: allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: {\n        frontmatter: { template: { eq: \"article\" }, published: { ne: false } }\n      }\n    ) {\n      edges {\n        article: node {\n          id\n          ...ArticleCardInfo\n        }\n      }\n    }\n    tags: allMarkdownRemark(\n      filter: {\n        frontmatter: { template: { eq: \"article\" }, published: { ne: false } }\n      }\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst LinkList = ({ titles, links }) => {\n  return (\n    <>\n      {titles && titles.length === links.length && (\n        <span className=\"link-list\">\n          {titles.map((e, i, arr) => (\n            // React fragment = <>, </>\n            <React.Fragment key={i}>\n              <Link className=\"link-list-link\" to={\"/\" + links[i]}>\n                {e}\n              </Link>\n              {i !== arr.length - 1 && <span> / </span>}\n            </React.Fragment>\n          ))}\n        </span>\n      )}\n    </>\n  )\n}\n\nexport default LinkList\n","const specialNames = {\n  \"C#\": \"CSharp\",\n  \"C++\": \"Cpp\",\n}\n\n/**\n * Gets a custom url-friendly category/tag name. E.g. C++ would encode to C%2B%2B. Using this, we encode as Cpp instead.\n * @param {string} name The name to encode.\n */\nfunction getUrlFriendlyName(name) {\n  if (Object.keys(specialNames).includes(name)) {\n    return specialNames[name]\n  }\n  return name\n}\n\nmodule.exports = { getUrlFriendlyName }\n","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport LinkList from \"../link-list\"\nimport { getUrlFriendlyName } from \"../../utils/category-url-conversion\"\n\nconst ArticleCard = ({ article: a }) => {\n  return (\n    <div className=\"card\">\n      <Link to={\"/articles/\" + a.frontmatter.slug}>\n        <Img\n          className={\"card__image\"}\n          fluid={{\n            ...a.frontmatter.headerImage.childImageSharp.fluid,\n            aspectRatio: 2,\n          }}\n          alt={`Image for ${a.frontmatter.title}`}\n          imgStyle={{\n            objectPosition: \"top center\",\n          }}\n        />\n        <h3 className={\"card__title\"}>{a.frontmatter.title}</h3>\n        <div className={\"card__body\"}>{a.excerpt}</div>\n      </Link>\n      <time className={\"card__date\"}>{a.frontmatter.date}</time>\n      <LinkList\n        titles={a.frontmatter.tags}\n        links={a.frontmatter.tags.map(\n          t => \"articles?tags=\" + getUrlFriendlyName(t)\n        )}\n      />\n    </div>\n  )\n}\n\nexport default ArticleCard\n\nexport const ArtcileCardInfoFragment = graphql`\n  fragment ArticleCardInfo on MarkdownRemark {\n    frontmatter {\n      title\n      tags\n      slug\n      headerImage {\n        childImageSharp {\n          fluid(quality: 100) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      date(formatString: \"MMMM Do, YYYY\")\n    }\n    excerpt(pruneLength: 150)\n  }\n`\n"],"sourceRoot":""}