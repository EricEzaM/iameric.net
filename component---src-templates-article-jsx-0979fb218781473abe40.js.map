{"version":3,"sources":["webpack:///./src/components/link-list.jsx","webpack:///./src/utils/category-url-conversion.jsx","webpack:///./src/templates/article.jsx"],"names":["LinkList","titles","links","length","className","map","e","i","arr","Fragment","key","to","specialNames","module","exports","getUrlFriendlyName","name","Object","keys","includes","Article","post","data","title","frontmatter","tags","date","fluid","headerImage","childImageSharp","imgStyle","objectPosition","dangerouslySetInnerHTML","__html","html"],"mappings":"4FAAA,qCAuBeA,IApBE,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC1B,OACE,oCACGD,GAAUA,EAAOE,SAAWD,EAAMC,QACjC,0BAAMC,UAAU,aACbH,EAAOI,KAAI,SAACC,EAAGC,EAAGC,GAAP,OAEV,kBAAC,IAAMC,SAAP,CAAgBC,IAAKH,GACnB,kBAAC,IAAD,CAAMH,UAAU,iBAAiBO,GAAI,IAAMT,EAAMK,IAC9CD,GAEFC,IAAMC,EAAIL,OAAS,GAAK,6C,mBCdvC,IAAMS,EAAe,CACnB,KAAM,SACN,MAAO,OAcTC,EAAOC,QAAU,CAAEC,mBAPnB,SAA4BC,GAC1B,OAAIC,OAAOC,KAAKN,GAAcO,SAASH,GAC9BJ,EAAaI,GAEfA,K,kCCbT,qGA0CeI,UAjCC,SAAC,GAAc,IACvBC,EADsB,EAAXC,KACCD,KAClB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKE,MAAOF,EAAKG,YAAYD,QAC7B,yBAAKnB,UAAU,QACb,yBAAKA,UAAU,gBACb,4BAAKiB,EAAKG,YAAYD,OACtB,yBAAKnB,UAAU,cACb,kBAAC,IAAD,CACEH,OAAQoB,EAAKG,YAAYC,KACzBvB,MAAOmB,EAAKG,YAAYC,KAAKpB,KAC3B,SAAAC,GAAC,MAAI,iBAAmBS,6BAAmBT,QAG/C,8BAAOe,EAAKG,YAAYE,OAE1B,kBAAC,IAAD,CACEC,MAAON,EAAKG,YAAYI,YAAYC,gBAAgBF,MACpDG,SAAU,CACRC,eAAgB,iBAItB,yBACE3B,UAAU,aACV4B,wBAAyB,CAAEC,OAAQZ,EAAKa","file":"component---src-templates-article-jsx-0979fb218781473abe40.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst LinkList = ({ titles, links }) => {\n  return (\n    <>\n      {titles && titles.length === links.length && (\n        <span className=\"link-list\">\n          {titles.map((e, i, arr) => (\n            // React fragment = <>, </>\n            <React.Fragment key={i}>\n              <Link className=\"link-list-link\" to={\"/\" + links[i]}>\n                {e}\n              </Link>\n              {i !== arr.length - 1 && <span> / </span>}\n            </React.Fragment>\n          ))}\n        </span>\n      )}\n    </>\n  )\n}\n\nexport default LinkList\n","const specialNames = {\n  \"C#\": \"CSharp\",\n  \"C++\": \"Cpp\",\n}\n\n/**\n * Gets a custom url-friendly category/tag name. E.g. C++ would encode to C%2B%2B. Using this, we encode as Cpp instead.\n * @param {string} name The name to encode.\n */\nfunction getUrlFriendlyName(name) {\n  if (Object.keys(specialNames).includes(name)) {\n    return specialNames[name]\n  }\n  return name\n}\n\nmodule.exports = { getUrlFriendlyName }\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/layout\"\nimport LinkList from \"../components/link-list\"\nimport { getUrlFriendlyName } from \"../utils/category-url-conversion\"\n\nconst Article = ({ data }) => {\n  const post = data.post\n  return (\n    <Layout>\n      <SEO title={post.frontmatter.title} />\n      <div className=\"post\">\n        <div className=\"post__header\">\n          <h1>{post.frontmatter.title}</h1>\n          <div className=\"post__meta\">\n            <LinkList\n              titles={post.frontmatter.tags}\n              links={post.frontmatter.tags.map(\n                e => \"articles?tags=\" + getUrlFriendlyName(e)\n              )}\n            />\n            <time>{post.frontmatter.date}</time>\n          </div>\n          <Img\n            fluid={post.frontmatter.headerImage.childImageSharp.fluid}\n            imgStyle={{\n              objectPosition: \"top center\",\n            }}\n          />\n        </div>\n        <div\n          className=\"post__body\"\n          dangerouslySetInnerHTML={{ __html: post.html }}\n        ></div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Article\n\nexport const query = graphql`\n  query($slug: String!) {\n    post: markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"dddd MMMM Do, YYYY\")\n        tags\n        headerImage {\n          childImageSharp {\n            fluid(quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n      timeToRead\n    }\n  }\n`\n"],"sourceRoot":""}