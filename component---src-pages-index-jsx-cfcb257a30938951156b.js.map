{"version":3,"sources":["webpack:///./src/components/cards/project-card.jsx","webpack:///./src/pages/index.jsx","webpack:///./src/components/link-list.jsx","webpack:///./src/utils/category-url-conversion.jsx","webpack:///./src/components/cards/article-card.jsx","webpack:///./src/components/cards/snippet-card.jsx"],"names":["ProjectCard","p","project","className","to","frontmatter","slug","fluid","headerImage","childImageSharp","aspectRatio","alt","title","imgStyle","objectPosition","blurb","date","titles","tags","links","map","t","getUrlFriendlyName","IndexPage","useStaticQuery","query","articles","snippets","projects","edges","article","key","id","snippet","LinkList","length","e","i","arr","Fragment","specialNames","module","exports","name","Object","keys","includes","ArticleCard","a","excerpt","SnippetCard","s"],"mappings":"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","file":"component---src-pages-index-jsx-cfcb257a30938951156b.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport LinkList from \"../link-list\"\nimport { getUrlFriendlyName } from \"../../utils/category-url-conversion\"\n\nconst ProjectCard = ({ project: p }) => {\n  return (\n    <div className=\"card\">\n      <Link to={\"/projects/\" + p.frontmatter.slug}>\n        <Img\n          className={\"card__image\"}\n          fluid={{\n            ...p.frontmatter.headerImage.childImageSharp.fluid,\n            aspectRatio: 2,\n          }}\n          alt={`Image for ${p.frontmatter.title}`}\n          imgStyle={{\n            objectPosition: \"top center\",\n          }}\n        />\n        <h3 className={\"card__title\"}>{p.frontmatter.title}</h3>\n        <div className={\"card__body\"}>{p.frontmatter.blurb}</div>\n      </Link>\n      <time className={\"card__date\"}>{p.frontmatter.date}</time>\n      <LinkList\n        titles={p.frontmatter.tags}\n        links={p.frontmatter.tags.map(\n          t => \"projects?tags=\" + getUrlFriendlyName(t)\n        )}\n      />\n    </div>\n  )\n}\n\nexport default ProjectCard\n\nexport const ProjectCardInfoFragment = graphql`\n  fragment ProjectCardInfo on MarkdownRemark {\n    frontmatter {\n      title\n      slug\n      tags\n      blurb\n      date(formatString: \"MMMM YYYY\")\n      headerImage {\n        childImageSharp {\n          fluid(quality: 100) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { graphql, Link, useStaticQuery } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport ArticleCard from \"../components/cards/article-card\"\nimport ProjectCard from \"../components/cards/project-card\"\nimport SnippetCard from \"../components/cards/snippet-card\"\n\nconst IndexPage = () => {\n  const { articles, snippets, projects } = useStaticQuery(query)\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n\n      <h3 className=\"page__subtitle\">\n        A mechanical engineer who loves programming.\n      </h3>\n      <div className=\"page__subtext\">\n        This website is a programming notebook of sorts - a place for me to\n        document things I have learned that might be useful in the future, as\n        well as showcase some of my projects. If someone out there finds what I\n        create or write about useful too, then that is just an added bonus!\n      </div>\n\n      <section>\n        <div className=\"section__title\">\n          <h1>Latest Articles</h1>\n          <Link to={\"articles\"}>\n            <h4>View All</h4>\n          </Link>\n        </div>\n        <div className=\"card-container\">\n          {articles.edges.map(({ article }) => (\n            <ArticleCard article={article} key={article.id} />\n          ))}\n        </div>\n      </section>\n\n      <section>\n        <div className=\"section__title\">\n          <h1>Latest Projects</h1>\n          <Link to={\"projects\"}>\n            <h4>View All</h4>\n          </Link>\n        </div>\n        <div className=\"card-container\">\n          {projects.edges.map(({ project }) => (\n            <ProjectCard project={project} key={project.id} />\n          ))}\n        </div>\n      </section>\n\n      <section>\n        <div className=\"section__title\">\n          <h1>Latest Snippets</h1>\n          <Link to={\"snippets\"}>\n            <h4>View All</h4>\n          </Link>\n        </div>\n        <div className=\"card-container--vertical\">\n          {snippets.edges.map(({ snippet }) => (\n            <SnippetCard snippet={snippet} key={snippet.id} />\n          ))}\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nconst query = graphql`\n  query {\n    articles: allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: {\n        frontmatter: { template: { eq: \"article\" }, published: { ne: false } }\n      }\n      limit: 3\n    ) {\n      edges {\n        article: node {\n          id\n          ...ArticleCardInfo\n        }\n      }\n    }\n    snippets: allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: {\n        frontmatter: { template: { eq: \"snippet\" }, published: { ne: false } }\n      }\n      limit: 3\n    ) {\n      edges {\n        snippet: node {\n          id\n          ...SnippetCardInfo\n        }\n      }\n    }\n    projects: allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      filter: {\n        frontmatter: { template: { eq: \"project\" }, published: { ne: false } }\n      }\n      limit: 3\n    ) {\n      edges {\n        project: node {\n          id\n          ...ProjectCardInfo\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst LinkList = ({ titles, links }) => {\n  return (\n    <>\n      {titles && titles.length === links.length && (\n        <span className=\"link-list\">\n          {titles.map((e, i, arr) => (\n            // React fragment = <>, </>\n            <React.Fragment key={i}>\n              <Link className=\"link-list-link\" to={\"/\" + links[i]}>\n                {e}\n              </Link>\n              {i !== arr.length - 1 && <span> / </span>}\n            </React.Fragment>\n          ))}\n        </span>\n      )}\n    </>\n  )\n}\n\nexport default LinkList\n","const specialNames = {\n  \"C#\": \"CSharp\",\n  \"C++\": \"Cpp\",\n}\n\n/**\n * Gets a custom url-friendly category/tag name. E.g. C++ would encode to C%2B%2B. Using this, we encode as Cpp instead.\n * @param {string} name The name to encode.\n */\nfunction getUrlFriendlyName(name) {\n  if (Object.keys(specialNames).includes(name)) {\n    return specialNames[name]\n  }\n  return name\n}\n\nmodule.exports = { getUrlFriendlyName }\n","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport LinkList from \"../link-list\"\nimport { getUrlFriendlyName } from \"../../utils/category-url-conversion\"\n\nconst ArticleCard = ({ article: a }) => {\n  return (\n    <div className=\"card\">\n      <Link to={\"/articles/\" + a.frontmatter.slug}>\n        <Img\n          className={\"card__image\"}\n          fluid={{\n            ...a.frontmatter.headerImage.childImageSharp.fluid,\n            aspectRatio: 2,\n          }}\n          alt={`Image for ${a.frontmatter.title}`}\n          imgStyle={{\n            objectPosition: \"top center\",\n          }}\n        />\n        <h3 className={\"card__title\"}>{a.frontmatter.title}</h3>\n        <div className={\"card__body\"}>{a.excerpt}</div>\n      </Link>\n      <time className={\"card__date\"}>{a.frontmatter.date}</time>\n      <LinkList\n        titles={a.frontmatter.tags}\n        links={a.frontmatter.tags.map(\n          t => \"articles?tags=\" + getUrlFriendlyName(t)\n        )}\n      />\n    </div>\n  )\n}\n\nexport default ArticleCard\n\nexport const ArtcileCardInfoFragment = graphql`\n  fragment ArticleCardInfo on MarkdownRemark {\n    frontmatter {\n      title\n      tags\n      slug\n      headerImage {\n        childImageSharp {\n          fluid(quality: 100) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      date(formatString: \"MMMM Do, YYYY\")\n    }\n    excerpt(pruneLength: 150)\n  }\n`\n","import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nconst SnippetCard = ({ snippet: s }) => {\n  return (\n    <div className=\"card card--narrow\">\n      <Link\n        to={\"/snippets/\" + s.frontmatter.slug}\n        className=\"card__content card__content--vertical\"\n      >\n        <Img\n          className={\"card__image--vertical\"}\n          fluid={{\n            ...s.frontmatter.headerImage.childImageSharp.fluid,\n            aspectRatio: 2,\n          }}\n          alt={`Image for ${s.frontmatter.title}`}\n        />\n        <div>\n          <h3 className={\"card__title card__title--vertical\"}>\n            {s.frontmatter.title}\n          </h3>\n          <time className={\"card__date\"}>{s.frontmatter.date}</time>\n        </div>\n      </Link>\n    </div>\n  )\n}\n\nexport default SnippetCard\n\nexport const SnippetCardInfoFragment = graphql`\n  fragment SnippetCardInfo on MarkdownRemark {\n    frontmatter {\n      title\n      slug\n      category\n      headerImage {\n        childImageSharp {\n          fluid(quality: 100) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      date(formatString: \"MMMM Do, YYYY\")\n    }\n  }\n`\n"],"sourceRoot":""}